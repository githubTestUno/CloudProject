:root {
  --color-primary: #2584ff;
  --color-secondary: #00d9ff;
  --color-accent: #ff3400;
  --color-headings: #1b0760;
  --color-body: #918ca4;
  --color-body-darker: #5c5577;
  /* This variables is for "Input Group" section */
  --color-border: #ccc;
  --border-radius: 30px;
}
/* 1st, identify the primary, secondary, and accent color.
   2nd, Define the color pallet using the variables. So we can reuse them in multiple places.
   Note: use the :root pseudo selector = <html> element
        :root - define the global variables
    */

*,
*::after,
*::before {
  /* This property fix the box sizing issue of <a> with a btn classes */
  box-sizing: border-box;
}

/* Typhography*/
html {
  font-size: 62.5%;
}
body {
  font-family: Inter, Arial, Halvetica, sans-serif;
  font-size: 2.4rem;
  /* it means 1.5 x the current font-size:*/
  line-height: 1.5;
  color: var(--color-body);
}
h1,
h2,
h3 {
  color: var(--color-headings);
  margin-bottom: 1rem;
}
h1 {
  font-size: 7rem;
}

h2 {
  font-size: 4rem;
}

h3 {
  font-size: 3rem;
}

p {
  /* This property will let the heading<h3> decide the margin above the <p>   */
  margin-top: 0;
}

/* 1024px - Standard Breakpoint (Used by Bootstrap and Tailwind)
   Breaking point for Loptop and Desktop. */
@media screen and (min-width: 1024px) {
  /* Use Photoshop to measure their px: */
  body {
    font-size: 1.8rem;
  }
  h1 {
    font-size: 8rem;
  }
  h2 {
    font-size: 4rem;
  }
  h3 {
    font-size: 2.4rem;
  }
}

/* Links */
/* This rule will remove all the underline on anchor element */
a {
  text-decoration: none;
}

.link-arrow {
  color: var(--color-accent);
  text-transform: uppercase;
  /* These values is from mobile version of our design */
  font-size: 2rem;
  font-weight: bold;
  margin-right: 1px;
}

.link-arrow::after {
  content: "-->";
  margin-left: 5px;
  /* Apply the transition to make it smooth trasnition */
  transition: margin 0.15s;
}

/* Targeting the "after" element, This class will move the arrow 10px from R to L once u hover it. */
.link-arrow:hover::after {
  margin-left: 10px;
}

/* Best Approach to make a new @media query for "Links" part  */
@media screen and (min-width: 1024px) {
  .link-arrow {
    font-size: 1.5rem;
  }
}

/* Badges */
/* The Structure: */
.badge {
  border-radius: 20px;
  padding: 0.5rem 2rem;
  font-weight: bold;
  /* This property will prevent the badge from wrapping to second line, Very Important if you have a limited space */
  white-space: nowrap;
  font-weight: 600;
}
/* The Skin: */
/* BEM naming convention - "Block Element Modifier" */
.badge--primary {
  background: var(--color-primary);
  color: #fff;
}
.badge--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.badge--small {
  font-size: 1.6rem;
  /* Plan Section: This property will reduce the padding size and make badge look presentable */
  padding: 0.5rem 1.5rem;
}

@media screen and (min-width: 1024px) {
  .badge {
    font-size: 1.5rem;
  }
  .badge--small {
    font-size: 1.2rem;
  }
}

/* List */
.list {
  list-style: none;
  /* left padding that apply by browsers by default */
  padding-left: 0;
  color: var(--color-headings);
}

/* Apply Object oriented principle, Seperating the structure from skin */
/* You don't want to add the li here because CSS will know the HTML structure 
     instead add a class name of .list__name on ur list item on HTML*/
/* In BEM we seperate block from it's element using double underscore __ */
.list--inline .list__item {
  /* inline-block will help you apply a "margin" */
  display: inline-block;
  /* Items are too close */
  margin-right: 2rem;
}

.list--tick {
  list-style-image: url(../images/tick.svg);
  /*Ticks img are off the creen so you have to move them 3rem from left.
    This property will show off the tick img */
  padding-left: 3rem;
}

.list--tick .list__item {
  padding-left: 0.5rem;
  margin-bottom: 1rem;
}

@media screen and (min-width: 1024px) {
  .list--tick .list__item {
    padding-left: 0;
  }
}

/* Icons */
/* SVG is customizable.
   Combined all the SVG file with sprite.
   Sprite - combined multiple image into single image. (Head to: svgsprit.es )
    Pros: will reduce the number of http request */
.icon {
  width: 40px;
  height: 40px;
}

.icon--small {
  width: 30px;
  height: 30px;
}

/* this class will define a seperate skins for this icon(The Structure) */
.icon--primary {
  /* fill: property only apply on svg img */
  fill: var(--color-primary);
}
/* Tip: Don't over engineer everythin, Just solve the problem that exist 
        and you have to fix at the moment */

.icon--secondary {
  fill: var(--color-secondary);
}

icon--white {
  fill: white;
}

.icon-container {
  background: #f3f9fa;
  width: 64px;
  height: 64px;
  border-radius: 100%;
  /* Chnage the display to inline-block to inline-flex. TO ceenter the icon */
  display: inline-flex;
  justify-content: center;
  align-items: center;
}

/* Icon for Testimonial */
.icon-container--accent {
  background: var(--color-accent);
  fill: #fff;
}

/* Buttons */
/* 1st, Always define the structure and seperate it from skin.
   2nd, Do the Mobile first approach. For mobile you always going to have a bigger font*/
/* 3rd, Make the :hover state for each skin. Make this classes next to them */
/* 4th, Implementing block buttons */
/* 5th, Adding a Vertical Margin to seperate this from other element */
/* 6th, Make the desktop version. All the time you just have to reduce the font size */
/* Buttons (Structure) */
.btn {
  border-radius: 40px;
  border: 0;
  /*cursor: this property will make our "normal" btn w/o <a> clickable */
  cursor: pointer;
  font-size: 1.8rem;
  font-weight: 600;
  /* This Vertical margin will seperate this from other elements */
  margin: 1rem 0;
  padding: 2rem 3rem;
  /* This property is for <a> element to ake sure the text is always center of the btn*/
  text-align: center;
  text-transform: uppercase;
  /*ws: incase we have limited space this property will wont let the text and button to wrap to 2nd line */
  white-space: nowrap;
}

/* Buttons (Skin) */
.btn--primary {
  background: var(--color-primary);
  color: #fff;
}
.btn--primary:hover {
  /* Use "eye picker" from Photoshop to get the "lighter/brighter version" of the color you want to choose */
  /* You can also use "CSS pre-processor(SASS or LESS) "
     SASS - for this one there's a "ligthen(primary, 10%)" "Darker" Version of it */
  background: #4472d4;
}

.btn--secondary {
  background: var(--color-secondary);
  color: #fff;
}

.btn--secondary:hover {
  background: #00caeb;
}

.btn--accent {
  background: var(--color-accent);
  color: #fff;
}

.btn--accent:hover {
  background: #eb6847;
}

.btn--outline {
  background: #fff;
  color: var(--color-headings);
  border: 2px solid var(--color-headings);
}
.btn--outline:hover {
  background: var(--color-headings);
  color: #fff;
}
/* Tip: Always test your code as you go */

.btn--block {
  width: 100%;
  display: inline-block;
}
/* By default browser set the box sizing of <button> into box-sizing:border-box;
   That's why we have to set a universal selector for box-sizing for <a> that has a button class in it to fix this issue */

@media screen and (min-width: 1024px) {
  /* Use Photoshop to know how much value you will put on this one */
  .btn {
    font-size: 1.5rem;
  }
}

/* Inputs */

.input {
  border: 2px solid var(--color-border);
  border-radius: var(--border-radius);
  /* Default color of this is black, but we can change it to same color as our headings */
  color: var(--color-headings);
  font-size: 1.8rem;
  /* This property will remove the "outline" set by google by default */
  outline: 0;
  padding: 1.5rem 3.5rem;
}

.input::placeholder {
  color: lightgrey;
  /* font-size: 2rem; REMEMBER! this is a Structure so dont mix it with a skin, 
  Put this on .input class */
}
.input-group {
  border: 1px solid var(--color-border);
  border-radius: var(--border-radius);
  /* This property will take out the entire space for <input> field and will push the button all the way to right end.
   Now the <input> inside your <div> will become "flex-item" */
  display: flex;
}

.input-group .input {
  border: 0;
  /* Flex item - This input field will grow and take up the available space */
  flex-grow: 1;
  /* This property will remove the space b/w the icon or search btn and <input> field */
  padding: 1.5rem 1rem;
}

/* This class will fix the margin issue we have from btn-accent */
.input-group .btn {
  margin: 4px;
}

@media screen and (min-width: 1024px) {
  .input {
    font-size: 1.5rem;
  }
}
/* Input component is ready now combined it with button */

/* Input Groups */
/* What u see is an illusion of an "input" component. On reality you have a <div>.
   Inside this <div> you have the <input> component and <button> component.
   The actual border is apply to the <div> or container */
/* You can also move around the elemet like <button> before the <input> or vice versa or
   You can add another components like an icon with your <input> field */

/*  Cards */
/* Cards should have:
   1. Round Corner
   2. Header
   3. Body
   4. Shadow Around it */
.card {
  border-radius: 7px;
  /* 0 0 - for <hr> and <vr> offset. 
    20px - blurring the shadow and maken it softer. 
    10px - for spreading the shadow, The larger the bigger the shadow.  */
  box-shadow: 0 0 20px 10px #f3f3f3;
  /* This property will remove the overflow issue cause by adding a background color on .card__header */
  overflow: hidden;
}

/* This will help to line up our elements properly  */
.card__header,
.card__body {
  padding: 2rem 3rem;
}

.card--primary .card__header {
  background: var(--color-primary);
  color: #fff;
}

.card--secondary .card__header {
  background: var(--color-secondary);
  color: #fff;
}

.card--secondary .badge--secondary {
  /* To check the background use PhotoShop */
  background: #02cdf1;
}
/* Plans */
.plan__name {
  color: #fff;
  /* this property will remove the spacing above the heading that comes from <h3> element*/
  margin: 0;
  font-weight: 500;
  font-size: 2.4rem;
}

.plan__price {
  font-size: 6rem;
}

.plan__billing-cycle {
  font-size: 2.4rem;
  /* This property will make our font thinner  */
  font-weight: 300;
  opacity: 80%;
  margin-right: 1rem;
}

.plan__description {
  /* This property will prevent the .plan__description to go along with badge */
  display: block;
  font-size: 2rem;
  font-weight: 300;
  /* You willn notice the space b/w each letter */
  letter-spacing: 1px;
}

/* This class will add a spacing b/w letters and <vr> spacing b/w list items */
.plan .list__item {
  letter-spacing: 1px;
  margin-bottom: 2rem;
}

/* Popular Badge */
.plan--popular .card__header {
  /* This will let the popular badge stay on it's "parent container"  */
  position: relative;
}

.plan--popular .card__header::before {
  content: url(../images/popular.svg);
  width: 40px;
  /* Because this is an inline element we have to set the display to inline-block in order for width to works */
  display: inline-block;
  /* Once u set this property other element won't think that this img doesn't exist, this img will be on top of them */
  position: absolute;
  top: -6px;
  right: 5%;
}
/* End of Popular Badge */
@media screen and (min-width: 1024px) {
  /* Use Photoshop to Measure this */
  .plan__name {
    font-size: 1.4rem;
  }
  .plan__price {
    font-size: 5rem;
  }
  .plan__billing-cycle {
    font-size: 1.6rem;
  }
  .plan__description {
    font-size: 1.7rem;
  }
}

/* Media */
.media {
  display: flex;
}

.media__title {
  margin-top: 0;
}
.media__body {
  margin: 0 2rem;
}

.media__image {
  margin-top: 1rem;
  /* Just want to make it look good :D */
  margin-left: 1rem;
}

/* Quotes */
.quote {
  /* USe PS to measuere the  font-size */
  font-size: 3rem;
  font-style: italic;
  color: var(--color-body-darker);
  /* Line are closer <vr>. It has to be closer. */
  line-height: 1.3;
}

.quote__text::before {
  content: open-quote;
}

.quote__text::after {
  content: close-quote;
}

.quote__author {
  font-size: 3rem;
  font-weight: 500;
  font-style: normal;
  color: var(--color-headings);
  margin-bottom: 0;
}

.quote__organization {
  /* You can use Photoshop to see the fopnt-color of the company */
  color: var(--color-headings);
  font-size: 2rem;
  font-weight: 300;
  font-style: normal;
  opacity: 0.4;
}

/* Use Relative positioning to re-position the "Line" Icon.
 Position this element relative to itself w/o effecting the other element */
.quote__line {
  position: relative;
  bottom: 10px;
}

@media screen and (min-width: 1024px) {
  .quote {
    font-size: 2rem;
  }
  .quote__author {
    font-size: 2.4rem;
  }
  .quote__organization {
    font-size: 1.5rem;
  }
}

/* Grids */
.grid {
  display: grid;
}

/* Standard Breakpoint that a lot of frameworks use*/
@media screen and (min-width: 768px) {
  /* This class are only for screen that has a 768px wider screen*/
  .grid--1x2 {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media screen and (min-width: 1024px) {
  .grid--1x3 {
    grid-template-columns: repeat(3, 1fr);
  }
}

/* Testimonial */
.testimonial {
  /* This property will have a 3 rem  */
  padding: 3rem;
}
.testimonial__image {
  position: relative;
}

.testimonial__image > img {
  /* This property will provide an equal distribution of the columns for image and quote area.
     An Image will adjust to browswers size */
  width: 100%;
}

.testimonial__image > .icon-container {
  position: absolute;
  top: 3rem;
  right: -32px;
}

testimonial--accent {
  background-color: var(--color-accent);
}

.card .icon {
  overflow: visible;
}

@media screen and (min-width: 768px) {
  .testimonial .quote,
  .testimonial .quote__author {
    font-size: 2.4rem;
  }
  .testimonial .quote {
    margin: 6rem;
  }
}

@media screen and (min-width: 500px) {
  .testimonial__image > .icon-container {
    right: -30px;
  }
}
